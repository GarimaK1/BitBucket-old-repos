/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SalesWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.AuthorizationOrganization;
import Business.Organization.Organization;
import Business.Organization.SalesOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AuthorizationLevelWorkRequest;
import Business.WorkQueue.SalesLevelWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class SalesWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private SalesOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    private Organization org;

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public SalesWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, SalesOrganization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        valueLabel.setText(enterprise.getName());
        this.business = business;
        System.out.println("My Papa " + enterprise.getName());
        populateRequestTable();

    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        System.out.println("device selected start populate");
        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {

            System.out.println("device " + request.getDevice());
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getEnterprise();
            row[2] = request.getStatus();
            row[3] = request.getStatus();
            String result = ((SalesLevelWorkRequest) request).getTestResult();

            row[4] = result == null ? "Waiting" : result;
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        refreshTestJButton = new javax.swing.JButton();
        valueLabel = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        ForwardReqtoHCP = new javax.swing.JButton();
        OrderDeliverBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(235, 224, 225));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device", "Enterprise", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 88, 484, 127));

        requestTestJButton.setText("Initiate New Sale +");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 233, -1, -1));

        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(448, 47, -1, -1));

        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 22, 150, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        enterpriseLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        enterpriseLabel.setText("Enterprise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 23, 84, -1));

        ForwardReqtoHCP.setText("Forward to HCP >");
        ForwardReqtoHCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForwardReqtoHCPActionPerformed(evt);
            }
        });
        add(ForwardReqtoHCP, new org.netbeans.lib.awtextra.AbsoluteConstraints(384, 233, -1, -1));

        OrderDeliverBtn.setText("Deliver Order");
        OrderDeliverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderDeliverBtnActionPerformed(evt);
            }
        });
        add(OrderDeliverBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 233, 155, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("approval Jpanel", new DeviceApprovalJPanel(userProcessContainer, userAccount, organization, enterprise, business));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void refreshTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();

    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void ForwardReqtoHCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForwardReqtoHCPActionPerformed
        // TODO add your handling code here:

        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a Request !!");
            return;

        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getStatus().equals("To Be Processed")) {
            //JOptionPane.showMessageDialog(null, "fourward req start to auth");
            AuthorizationLevelWorkRequest requestObjForAuthenticator = new AuthorizationLevelWorkRequest();

            requestObjForAuthenticator.setDevice(request.getDevice());
            requestObjForAuthenticator.setEnterprise(request.getEnterprise());
            requestObjForAuthenticator.setSender(userAccount);
            requestObjForAuthenticator.setStatus("To Be Processed");
            requestObjForAuthenticator.setParentId(request.getRequestId());
            requestObjForAuthenticator.setParentRequestObject(request);
            
            request.setChildRequestObject(requestObjForAuthenticator);

            business.getAllWorkList().add(requestObjForAuthenticator);
            //JOptionPane.showMessageDialog(null, "object created for auth");

            for (Network net : business.getNetworkList()) {
                for (Enterprise enter : net.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enter.getName().equals(request.getEnterprise().getName())) {
                        for (Organization org1 : enter.getOrganizationDirectory().getOrganizationList()) {
                            if (org1 instanceof AuthorizationOrganization) {
                                org1.getWorkQueue().getWorkRequestList().add(requestObjForAuthenticator);
                                request.setStatus("Sent to Healthcare");
                                JOptionPane.showMessageDialog(null, "Request is forward to Healthcare auth dep!");
                            }
                        }

                    }
                }
            }
        }
        populateRequestTable();
    }//GEN-LAST:event_ForwardReqtoHCPActionPerformed

    private void OrderDeliverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderDeliverBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a Request !!");
            return;
        }

        WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getStatus().equals("Order Placed")) {

            ChangeStatustoOrderDeliver(request);

        } else {
            JOptionPane.showMessageDialog(null, "You can't place order for this request !");
        }

    }//GEN-LAST:event_OrderDeliverBtnActionPerformed

    public void ChangeStatustoOrderDeliver(WorkRequest req) {
        WorkRequest childRequest = req.getChildRequestObject();
        childRequest.setStatus("Order Delivered");
        req.setStatus("Order Delivered");
         ChangeStatustoOrderDeliverToManu(req);

    }

    public void ChangeStatustoOrderDeliverToManu(WorkRequest req) {
        WorkRequest parentRequest = req.getParentRequestObject();
        if(parentRequest!=null){
        parentRequest.setStatus(req.getStatus());
        }
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ForwardReqtoHCP;
    private javax.swing.JButton OrderDeliverBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshTestJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
