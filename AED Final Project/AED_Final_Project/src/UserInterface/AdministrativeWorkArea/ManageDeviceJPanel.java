/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeWorkArea;

import Business.DeviceCategory.Device;
import Business.Enterprise.Enterprise;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author divinity
 */
public class ManageDeviceJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageDeviceJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;

    public ManageDeviceJPanel(JPanel userProcessContainer, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        valueLabel.setText(enterprise.toString());

        populatetable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populatetable() {
        DefaultTableModel model = (DefaultTableModel) DeviceJTable.getModel();

        model.setRowCount(0);

        for (Device dev : enterprise.getDeviceDirectory().getDeviceList()) {
            for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                Object[] row = new Object[5];
                row[0] = dev.getDeviceId();
                row[1] = dev;
                row[2] = dev.getMakinPrice();
                row[3] = dev.getSellingPrice();
                row[4] = userAccount.getUsername();

                model.addRow(row);
            }
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textDeviceName = new javax.swing.JTextField();
        btnAddDevice = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DeviceJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        makingPrice = new javax.swing.JTextField();
        sellingPrice = new javax.swing.JTextField();

        setBackground(new java.awt.Color(201, 218, 229));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Enterprise: ");

        valueLabel.setText("value");

        jLabel2.setText("Device Name: ");

        btnAddDevice.setText("Add Device");
        btnAddDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDeviceActionPerformed(evt);
            }
        });

        DeviceJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device ID", "Device Name", "Making Price", "Selling Price", "User"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DeviceJTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(DeviceJTable);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Manage Devices");

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Device Selling Price:");

        jLabel5.setText("Device Making Price:");

        makingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                makingPriceKeyTyped(evt);
            }
        });

        sellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sellingPriceKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(backJButton)
                        .addGap(113, 113, 113)
                        .addComponent(btnAddDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(makingPrice)
                                    .addComponent(sellingPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(12, 12, 12)
                                .addComponent(textDeviceName, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(241, 241, 241))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(valueLabel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2))
                    .addComponent(textDeviceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(makingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(sellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(backJButton))
                    .addComponent(btnAddDevice)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDeviceActionPerformed
        // TODO add your handling code here:
        String name = textDeviceName.getText();
        Double makPrice = Double.parseDouble(makingPrice.getText());
        Double selprice = Double.parseDouble(sellingPrice.getText());
        if (name.equals("") || makingPrice.equals("") || sellingPrice.equals("")) {
            JOptionPane.showMessageDialog(null, "All fields are mandatory!!");
            return;
        }
        if (makPrice >= selprice) {
            JOptionPane.showMessageDialog(null, "Making price cannot be equal to or greater than selling price!!");
            return;
        }
        Device device = enterprise.getDeviceDirectory().createAndAddDevice(name, makPrice, selprice);
        //device.setBelongsToDir(enterprise.getDeviceDirectory());
        populatetable();
        textDeviceName.setText("");
        makingPrice.setText("");
        sellingPrice.setText("");

    }//GEN-LAST:event_btnAddDeviceActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void makingPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_makingPriceKeyTyped
        // TODO add your handling code here:
        char inputMakingPrice = evt.getKeyChar();
        if (inputMakingPrice == KeyEvent.VK_PERIOD && makingPrice.getText().indexOf(".") != -1) {
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "A float can contain only one decimal point!");
            evt.consume();
        }
        if (!((Character.isDigit(inputMakingPrice)) || (inputMakingPrice == KeyEvent.VK_PERIOD) || (inputMakingPrice == KeyEvent.VK_BACK_SPACE) || (inputMakingPrice == KeyEvent.VK_DELETE))) {
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please enter only decimal numbers or integer!");
            evt.consume();
        }
    }//GEN-LAST:event_makingPriceKeyTyped

    private void sellingPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sellingPriceKeyTyped
        // TODO add your handling code here:
        // TODO add your handling code here:
        char inputSellingPrice = evt.getKeyChar();
        if (inputSellingPrice == KeyEvent.VK_PERIOD && sellingPrice.getText().indexOf(".") != -1) {
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "A float can contain only one decimal point!");
            evt.consume();
        }
        if (!((Character.isDigit(inputSellingPrice)) || (inputSellingPrice == KeyEvent.VK_PERIOD) || (inputSellingPrice == KeyEvent.VK_BACK_SPACE) || (inputSellingPrice == KeyEvent.VK_DELETE))) {
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Please enter only decimal numbers or integer!");
            evt.consume();
        }
    }//GEN-LAST:event_sellingPriceKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DeviceJTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnAddDevice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField makingPrice;
    private javax.swing.JTextField sellingPrice;
    private javax.swing.JTextField textDeviceName;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
